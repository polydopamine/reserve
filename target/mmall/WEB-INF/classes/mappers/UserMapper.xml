<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.reserve.dao.UserMapper">
  <resultMap id="BaseResultMap" type="com.reserve.pojo.User">
    <constructor>
      <idArg column="id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="username" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="realname" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="password" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="role" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="enrollment_year" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="lab_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="instrutor_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="student_id" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="phone" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="email" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="enable_role" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="create_time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="update_time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
    </constructor>
  </resultMap>
  <sql id="Base_Column_List">
    id, username, realname, password, role, enrollment_year, lab_id, instrutor_id, student_id, 
    phone, email, enable_role, create_time, update_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from user
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.reserve.pojo.User">
    insert into user (id, username, realname, 
      password, role, enrollment_year, 
      lab_id, instrutor_id, student_id, 
      phone, email, enable_role, 
      create_time, update_time)
    values (#{id,jdbcType=INTEGER}, #{username,jdbcType=VARCHAR}, #{realname,jdbcType=VARCHAR}, 
      #{password,jdbcType=VARCHAR}, #{role,jdbcType=INTEGER}, #{enrollmentYear,jdbcType=INTEGER}, 
      #{labId,jdbcType=INTEGER}, #{instrutorId,jdbcType=INTEGER}, #{studentId,jdbcType=VARCHAR}, 
      #{phone,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, #{enableRole,jdbcType=INTEGER}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.reserve.pojo.User">
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="username != null">
        username,
      </if>
      <if test="realname != null">
        realname,
      </if>
      <if test="password != null">
        password,
      </if>
      <if test="role != null">
        role,
      </if>
      <if test="enrollmentYear != null">
        enrollment_year,
      </if>
      <if test="labId != null">
        lab_id,
      </if>
      <if test="instrutorId != null">
        instrutor_id,
      </if>
      <if test="studentId != null">
        student_id,
      </if>
      <if test="phone != null">
        phone,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="enableRole != null">
        enable_role,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="username != null">
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="realname != null">
        #{realname,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="role != null">
        #{role,jdbcType=INTEGER},
      </if>
      <if test="enrollmentYear != null">
        #{enrollmentYear,jdbcType=INTEGER},
      </if>
      <if test="labId != null">
        #{labId,jdbcType=INTEGER},
      </if>
      <if test="instrutorId != null">
        #{instrutorId,jdbcType=INTEGER},
      </if>
      <if test="studentId != null">
        #{studentId,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        #{phone,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="enableRole != null">
        #{enableRole,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.reserve.pojo.User">
    update user
    <set>
      <if test="username != null">
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="realname != null">
        realname = #{realname,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="role != null">
        role = #{role,jdbcType=INTEGER},
      </if>
      <if test="enrollmentYear != null">
        enrollment_year = #{enrollmentYear,jdbcType=INTEGER},
      </if>
      <if test="labId != null">
        lab_id = #{labId,jdbcType=INTEGER},
      </if>
      <if test="instrutorId != null">
        instrutor_id = #{instrutorId,jdbcType=INTEGER},
      </if>
      <if test="studentId != null">
        student_id = #{studentId,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        phone = #{phone,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="enableRole != null">
        enable_role = #{enableRole,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.reserve.pojo.User">
    update user
    set username = #{username,jdbcType=VARCHAR},
      realname = #{realname,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      role = #{role,jdbcType=INTEGER},
      enrollment_year = #{enrollmentYear,jdbcType=INTEGER},
      lab_id = #{labId,jdbcType=INTEGER},
      instrutor_id = #{instrutorId,jdbcType=INTEGER},
      student_id = #{studentId,jdbcType=VARCHAR},
      phone = #{phone,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      enable_role = #{enableRole,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="selectUsername" parameterType="String" resultType="int">
    select count(*)
    from user
    where username = #{username}
  </select>

  <select id="selectEmail" parameterType="String" resultType="int">
    select count(*)
    from user
    where email = #{email}
  </select>

  <select id="selectByUsernamePassword" parameterType="map" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from user
    where username = #{username}
    and password = #{password}
  </select>

  <select id="selectUserByLabId" parameterType="list" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from user
    <if test="labId != null">
      where lab_id = #{labId}
    </if>
  </select>

  <select id="checkUserIdPassword" parameterType="map" resultType="int">
    select count(*)
    from user
    where id = #{userId}
    and password = #{password}
  </select>

  <update id="updatePasswordByUserId" parameterType="map">
    update user
    set password = #{password},
    update_time = now()
    where id = #{userId}
  </update>

  <select id="listInstructor" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from user
    where role = 1
  </select>

  <update id="updatePasswordByUsername" parameterType="map">
    update user
    set password = #{passwordNew},
    update_time = now()
    where username = #{username}
  </update>
</mapper>